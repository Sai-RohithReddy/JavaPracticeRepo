package BinaryTree;

import java.util.Stack;

public class BinaryTreeImplementation {
	
	private TreeNode root;

	private class TreeNode{
		private TreeNode right;
		private TreeNode left;
		private int data;
		
		public TreeNode(int data) {
			this.data = data;
		}
	}
		
	public void createBT() {
		TreeNode first = new TreeNode(1);
		TreeNode second = new TreeNode(2);
		TreeNode third = new TreeNode(3);
		TreeNode forth = new TreeNode(4);
		TreeNode fifth = new TreeNode(5);
		
		root = first;
		
		first.left = second;
		first.right = third;
		
		second.left = forth;
		second.right = fifth;
	}
	
	public void preOrderRecursive(TreeNode root) {
		if (root == null) {
			return;
		}
		
		System.out.print(root.data + " ");
		preOrderRecursive(root.left);
		preOrderRecursive(root.right);
		
		System.out.println();
	}
	
	public void preOrderIter(TreeNode root) {
		if (root == null) return;
		
		Stack<TreeNode> stack = new Stack<>();
		stack.push(root);
		
		while (!stack.isEmpty()) {
			TreeNode temp = stack.pop();
			System.out.print(temp.data + " ");
			
			if (temp.right != null) stack.push(temp.right);
			
			if (temp.left != null) stack.push(temp.left);
		}
		System.out.println();
	}
	
	public static void main(String[] args) {
		
		BinaryTreeImplementation bt1 = new BinaryTreeImplementation();
		bt1.createBT();
		bt1.preOrderRecursive(bt1.root);
		
		bt1.preOrderIter(bt1.root);

	}

}
